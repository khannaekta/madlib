/* ----------------------------------------------------------------------- */
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 * @file minibatch_preprocessing_dl.sql_in
 * @brief TODO
 * @date December 2018
 *
 */
/* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')

/**
@addtogroup grp_minibatch_preprocessing_dl

<div class="toc"><b>Contents</b><ul>
<li class="level1"><a href="#minibatch_preprocessor_dl">Mini-Batch Preprocessor for Image Data</a></li>
<li class="level1"><a href="#example">Examples</a></li>
<li class="level1"><a href="#related">Related Topics</a></li>
</ul></div>

For deep learning based techniques such as convolutional neural nets, the input
data is often images. These images can be represented as an array of numbers
where each element represents grayscale or RGB channel values for each
pixel in the image. It is standard practice to normalize the image data before
training. The normalizing constant is parameterized, and can be set depending on
the format of image data used.

This mini-batch preprocessor is a lightweight version designed specifically
for image data.  A separate more general minibatch_preprocessor() is also
available for other MADlib modules using non-image input data.

<pre class="syntax">
minibatch_preprocessor_dl( source_table,
                           output_table,
                           dependent_varname,
                           independent_varname,
                           buffer_size,
                           normalizing_const,
                           one_hot_encode_int_dep_var
                        )
</pre>

\b Arguments
<dl class="arglist">
  <dt>source_table</dt>
  <dd>TEXT. Name of the table containing input data.  Can also be a view.
  </dd>

  <dt>output_table</dt>
  <dd>TEXT.  Name of the output table from the preprocessor which
  will be used as input to algorithms that support mini-batching.
  Note that the arrays packed into the output table are shuffled
  and normalized (by dividing each element in the independent variable array
  by the "normalizing_const"), so they will not match up in an obvious way with
  the rows in the source table.
  </dd>

  <dt>dependent_varname</dt>
  <dd>TEXT. Name of the dependent variable column.
  </dd>

  <dt>independent_varname</dt>
  <dd>TEXT. Name of the independent variable column. The column must be
  a numeric array type.
  </dd>

  <dt>buffer_size (optional)</dt>
  <dd>INTEGER, default: computed.  Buffer size is the
  number of rows from the
  source table that are packed into one row of the preprocessor
  output table.  The default value is computed considering size of
  the source table, number of independent variables,
  and number of segments in the database cluster.
  </dd>

  <dt>normalizing_const (optional)</dt>
  <dd>DOUBLE PRECISION, default: 1.0. The normalizing constant to divide
  each value in the independent_varname array by.  For example, in some cases
  you may need to use 255 for this value if the image data is 0-255.
  </dd>

  <dt>one_hot_encode_int_dep_var (optional)</dt>
    <dd> BOOLEAN. default: FALSE.
    Flag to one-hot encode dependent variables that are
    scalar integers. This parameter is ignored if the
    dependent variable is not a scalar integer.

  @note The mini-batch preprocessor automatically encodes
  dependent variables that are boolean and character types such as text, char and
  varchar.  However, scalar integers are a special case because they can be used
  in both classification and regression problems, so you must tell the mini-batch
  preprocessor whether you want to encode them or not. In the case that you have
  already encoded the dependent variable yourself,  you can ignore this parameter.
  Also, if you want to encode float values for some reason, cast them to text
  first.
    </dd>

</dl>

<b>Output tables</b>
<br>
    The output table produced by the mini-batch preprocessor contains the following columns:
    <table class="output">
      <tr>
        <th>buffer_id</th>
        <td>INTEGER. Unique id for each row in the packed table.
        </td>
      </tr>
      <tr>
        <th>dependent_var</th>
        <td>ANYARRAY[]. Packed array of dependent variables. The type
        of the array is the same as the type of the dependent variable from
        the source table.
        </td>
      </tr>
      <tr>
        <th>independent_var</th>
        <td>REAL[]. Packed array of independent variables.
        </td>
      </tr>
    </table>

A summary table named \<output_table\>_summary is also created, which has the following columns:
    <table class="output">
    <tr>
        <th>source_table</th>
        <td>Name of the source table.</td>
    </tr>
    <tr>
        <th>output_table</th>
        <td>Name of output table generated by preprocessor.</td>
    </tr>
    <tr>
        <th>dependent_varname</th>
        <td>Dependent variable from the source table.</td>
    </tr>
    <tr>
        <th>independent_varname</th>
        <td>Independent variable from the source table.</td>
    </tr>
    <tr>
        <th>dependent_vartype</th>
        <td>Type of the dependent variable from the source table.</td>
    </tr>
    <tr>
        <th>buffer_size</th>
        <td>Buffer size used in preprocessing step.</td>
    </tr>
   </table>

@anchor example
@par Examples
-#  Create an artificial 2x2 resolution color image data set with 3 possible classifications.
The RGB values are per-pixel arrays:
<pre class="example">
DROP TABLE IF EXISTS image_data;
CREATE TABLE image_data AS (
    SELECT ARRAY[
        ARRAY[
            ARRAY[(random() * 256)::integer, -- pixel (1,1)
                (random() * 256)::integer,
                (random() * 256)::integer],
            ARRAY[(random() * 256)::integer, -- pixel (2,1)
                (random() * 256)::integer,
                (random() * 256)::integer]
        ],
        ARRAY[
            ARRAY[(random() * 256)::integer, -- pixel (1,2)
                (random() * 256)::integer,
                (random() * 256)::integer],
            ARRAY[(random() * 256)::integer, -- pixel (2,1)
                (random() * 256)::integer,
                (random() * 256)::integer]
        ]
    ] as rgb, ('{cat,dog,bird}'::text[])[ceil(random()*3)] as species
    FROM generate_series(1, 52)
);
SELECT * FROM image_data;
</pre>
<pre class="result">
                             rgb                             | species
-------------------------------------------------------------+---------
 {{{46,137,5},{208,71,90}},{{148,61,186},{8,109,10}}}        | dog
 {{{94,133,111},{41,211,179}},{{11,81,114},{26,182,105}}}    | dog
 {{{9,198,217},{84,224,7}},{{221,230,216},{36,64,107}}}      | dog
 {{{250,116,206},{4,249,43}},{{136,104,85},{91,27,96}}}      | bird
 {{{9,226,50},{223,238,158}},{{245,69,45},{206,35,139}}}     | bird
 {{{230,76,170},{97,38,256}},{{95,79,53},{153,17,188}}}      | bird
 {{{234,240,201},{63,210,211}},{{33,3,177},{16,161,166}}}    | cat
 {{{207,116,120},{90,46,94}},{{166,216,190},{204,216,29}}}   | cat
 {{{13,182,44},{201,174,22}},{{186,119,85},{139,73,118}}}    | dog
 {{{86,236,135},{98,229,56}},{{150,26,76},{235,115,142}}}    | bird
 {{{16,128,19},{82,2,21}},{{182,146,111},{44,27,251}}}       | dog
 {{{155,55,178},{135,61,127}},{{199,201,127},{146,211,0}}}   | bird
 {{{140,56,91},{37,205,186}},{{180,139,83},{212,94,163}}}    | dog
 {{{35,72,197},{64,98,167}},{{176,120,13},{209,199,55}}}     | cat
 {{{145,159,176},{36,127,176}},{{222,114,143},{214,56,142}}} | dog
 {{{152,248,249},{26,46,172}},{{65,203,229},{21,32,147}}}    | dog
 {{{211,57,188},{23,18,187}},{{69,60,112},{41,131,209}}}     | bird
 {{{190,51,66},{218,220,218}},{{210,213,244},{256,129,53}}}  | bird
 {{{40,0,124},{213,201,190}},{{80,68,77},{24,240,39}}}       | dog
 {{{105,121,39},{119,75,103}},{{48,228,8},{43,6,16}}}        | dog
 {{{214,143,134},{74,251,204}},{{49,226,171},{145,27,160}}}  | bird
 {{{71,224,194},{216,149,3}},{{80,52,97},{211,115,129}}}     | bird
 {{{66,131,251},{67,228,209}},{{210,106,27},{205,54,76}}}    | bird
 {{{193,43,21},{163,215,79}},{{211,130,254},{113,36,213}}}   | bird
 {{{183,29,86},{229,41,166}},{{73,97,155},{207,178,174}}}    | cat
 {{{253,235,211},{38,79,175}},{{51,176,42},{201,27,47}}}     | bird
 {{{107,217,255},{122,72,221}},{{23,244,58},{66,26,148}}}    | bird
 {{{221,95,164},{185,251,42}},{{94,58,58},{14,222,88}}}      | dog
 {{{105,188,149},{109,226,140}},{{80,31,105},{74,64,36}}}    | cat
 {{{215,40,134},{71,156,50}},{{160,226,179},{255,169,185}}}  | cat
 {{{146,235,249},{181,128,163}},{{161,132,14},{249,4,72}}}   | dog
 {{{195,223,197},{49,149,156}},{{89,26,227},{245,76,131}}}   | bird
 {{{255,131,128},{184,179,19}},{{163,171,200},{35,78,105}}}  | dog
 {{{79,128,8},{211,197,199}},{{22,160,79},{97,53,137}}}      | dog
(52 rows)
</pre>
-#  Run the preprocessor for image data:
<pre class="example">
DROP TABLE IF EXISTS image_data_packed, image_data_packed_summary;
SELECT madlib.minibatch_preprocessor_dl('image_data',         -- Source table
                                        'image_data_packed',  -- Output table
                                        'species',            -- Dependent variable
                                        'rgb',                -- Independent variable
                                        NULL,                 -- Buffer size
                                        255                   -- Normalizing constant
                                        );
</pre>
For small datasets like in this example, buffer size is mainly
determined by the number of segments in the database.
This example is run on a Greenplum database with 2 segments,
so there are 2 rows with a buffer size of 26.
For PostgresSQL, there would be only one row with a buffer
size of 52 since it is a single node database.
For larger data sets, other factors go into
computing buffers size besides number of segments.
Here is a sample of the packed output table:
<pre class="example">
\\x on
SELECT * FROM image_data_packed ORDER BY buffer_id;
</pre>
<pre class="result">
-[ RECORD 1 ]---+---------------------------------------------------------------------------------------------------------------------
independent_var | {{{{0.607843,0.215686,0.698039},{0.529412,0.239216,0.498039}},{{0.780392,0.788235,0.498039},{0.572549,0.827451,0}}},...}
dependent_var   | {bird,dog,dog,cat,bird,dog,bird,dog,cat,cat,bird,dog,dog,cat,bird,dog,bird,dog,bird,bird,dog,bird,dog,dog,bird,cat}
buffer_id       | 0
-[ RECORD 2 ]---+---------------------------------------------------------------------------------------------------------------------
independent_var | {{{{0.184314,0.380392,0.556863},{0.133333,0.764706,0.6}},{{0.470588,0.85098,0.32549},{0.666667,0.196078,0.129412}}},...}
dependent_var   | {bird,bird,bird,cat,dog,bird,cat,cat,bird,dog,dog,cat,dog,bird,cat,dog,bird,bird,dog,dog,dog,bird,dog,bird,bird,cat}
buffer_id       | 1
</pre>
Review the output summary table:
<pre class="example">
\\x on
SELECT * FROM image_data_packed_summary;
</pre>
<pre class="result">
-[ RECORD 1 ]-------+------------------
source_table        | image_data
output_table        | image_data_packed
dependent_varname   | species
independent_varname | rgb
dependent_vartype   | text
buffer_size         | 26
</pre>

-#  Load data in another format.  Create an artificial 2x2 resolution color image
data set with 3 possible classifications. The RGB values are unrolled into a flat array:
<pre class="example">
DROP TABLE IF EXISTS image_data;
CREATE TABLE image_data AS (
SELECT ARRAY[
        (random() * 256)::integer, -- R values
        (random() * 256)::integer,
        (random() * 256)::integer,
        (random() * 256)::integer,
        (random() * 256)::integer, -- G values
        (random() * 256)::integer,
        (random() * 256)::integer,
        (random() * 256)::integer,
        (random() * 256)::integer, -- B values
        (random() * 256)::integer,
        (random() * 256)::integer,
        (random() * 256)::integer
    ] as rgb, ('{cat,dog,bird}'::text[])[ceil(random()*3)] as species
FROM generate_series(1, 52)
);
SELECT * FROM image_data;
</pre>
<pre class="result">
                       rgb                        | species
--------------------------------------------------+---------
 {177,194,185,175,43,16,205,92,164,130,204,100}   | cat
 {128,51,73,226,104,194,73,190,98,23,98,101}      | cat
 {237,14,81,38,116,2,232,45,177,19,61,126}        | dog
 {225,0,59,69,29,187,120,102,157,224,40,230}      | dog
 {138,253,256,239,51,237,253,132,19,113,134,251}  | dog
 {55,14,219,182,125,189,182,184,2,211,115,122}    | cat
 {16,90,96,246,248,234,243,248,217,39,229,215}    | dog
 {247,72,49,242,230,104,256,193,30,125,126,212}   | cat
 {128,167,168,250,223,184,84,63,174,76,42,161}    | cat
 {3,200,41,218,114,32,33,163,18,8,11,18}          | bird
 {41,143,71,253,196,200,163,108,194,130,35,22}    | bird
 {209,98,235,114,167,238,58,207,200,172,240,233}  | cat
 {2,241,90,21,186,130,164,1,127,104,201,34}       | bird
 {139,164,247,161,102,200,3,82,58,170,64,115}     | dog
 {8,31,105,241,110,107,226,200,128,156,74,36}     | dog
 {200,140,103,234,95,241,143,86,146,245,30,149}   | cat
 {87,63,134,203,185,142,234,34,127,88,141,97}     | cat
 {13,254,105,49,155,50,189,2,28,28,243,171}       | dog
 {133,160,144,26,231,231,90,109,178,19,252,156}   | cat
 {123,244,194,221,20,208,218,125,1,117,175,190}   | dog
 {204,218,106,119,75,239,23,219,9,254,194,99}     | dog
 {116,118,103,16,171,226,5,109,191,25,61,153}     | dog
 {62,14,69,252,133,17,213,239,136,32,222,159}     | bird
 {231,157,189,74,9,49,192,112,66,107,83,70}       | bird
 {18,95,22,171,245,84,185,58,79,62,75,36}         | cat
 {211,69,11,114,64,242,15,254,60,24,47,252}       | dog
 {31,171,230,197,167,228,220,138,123,199,79,75}   | cat
 {83,238,149,1,213,101,150,168,179,155,255,49}    | dog
 {123,157,77,177,69,108,92,43,49,3,15,13}         | dog
 {138,212,221,212,219,48,194,113,49,152,213,199}  | cat
 {136,98,62,185,256,185,86,77,106,155,185,198}    | bird
 {235,202,213,247,87,95,203,52,51,167,100,245}    | cat
 {149,141,236,93,204,117,191,10,46,190,195,133}   | cat
 {45,32,196,244,230,175,189,187,166,21,26,113}    | cat
 {77,24,173,66,47,66,207,28,159,155,145,94}       | dog
 {191,28,104,67,39,150,99,235,137,73,154,71}      | cat
 {65,92,30,178,164,107,202,81,173,249,147,124}    | cat
 {50,23,166,144,188,101,172,36,168,211,186,11}    | bird
 {67,84,88,138,88,153,229,117,75,138,224,21}      | bird
 {140,14,110,8,36,160,31,201,48,219,46,219}       | bird
 {214,174,184,224,108,251,52,196,133,139,93,106}  | cat
 {168,244,225,189,207,109,203,61,117,239,221,148} | bird
 {13,111,230,232,109,188,150,37,157,2,32,209}     | bird
 {165,92,36,15,93,203,4,61,136,210,171,84}        | cat
 {32,66,236,180,251,249,34,225,225,144,157,119}   | bird
 {58,121,213,11,64,122,103,99,137,195,47,141}     | cat
 {183,95,171,11,111,203,77,91,127,72,83,162}      | cat
 {52,49,199,172,230,1,37,187,11,101,52,114}       | bird
 {190,53,247,75,54,174,170,226,185,24,173,6}      | dog
 {44,78,198,206,119,251,255,62,166,229,63,204}    | dog
 {75,49,212,189,249,146,242,240,221,40,159,134}   | cat
 {88,159,183,94,18,228,172,216,178,35,211,177}    | dog
(52 rows)
</pre>

-#  Run the preprocessor for image data:
<pre class="example">
DROP TABLE IF EXISTS image_data_packed, image_data_packed_summary;
SELECT madlib.minibatch_preprocessor_dl('image_data',         -- Source table
                                        'image_data_packed',  -- Output table
                                        'species',            -- Dependent variable
                                        'rgb',                -- Independent variable
                                        NULL,                 -- Buffer size
                                        255                   -- Normalizing constant
                                        );
</pre>
Here is a sample of the packed output table:
<pre class="example">
\\x on
SELECT * FROM image_data_packed ORDER BY buffer_id;
</pre>
<pre class="result">
-[ RECORD 1 ]-------+-------------------------------------
independent_var | {{0.501961,0.2,0.286275,0.886275,0.407843,0.760784,0.286275,0.745098,0.384314,0.0901961,0.384314,0.396078},...}}
dependent_var   | {cat,dog,cat,cat,bird,cat,dog,cat,dog,dog,dog,bird,dog,dog,cat,cat,cat,cat,bird,bird,bird,cat,cat,bird,dog,dog}
buffer_id       | 0
-[ RECORD 2 ]-------+-------------------------------------
independent_var | {{0.694118,0.760784,0.72549,0.686275,0.168627,0.0627451,0.803922,0.360784,0.643137,0.509804,0.8,0.392157},...}}
dependent_var   | {cat,dog,dog,dog,cat,bird,bird,dog,cat,cat,dog,bird,cat,cat,dog,bird,cat,dog,cat,bird,cat,bird,bird,cat,dog,cat}
buffer_id       | 1
</pre>

-# Generally the default buffer size will work well,
but if you have occasion to change it:
<pre class="example">
DROP TABLE IF EXISTS image_data_packed, image_data_packed_summary;
SELECT madlib.minibatch_preprocessor_dl('image_data',         -- Source table
                                        'image_data_packed',  -- Output table
                                        'species',            -- Dependent variable
                                        'rgb',                -- Independent variable
                                        10,                   -- Buffer size
                                        255                   -- Normalizing constant
                                        );
SELECT COUNT(*) FROM image_data_packed;
</pre>
<pre class="result">
 count
+-------
     6
</pre>
Review the output summary table:
<pre class="example">
\\x on
SELECT * FROM image_data_packed_summary;
</pre>
<pre class="result">
-[ RECORD 1 ]-------+------------------
source_table        | image_data
output_table        | image_data_packed
dependent_varname   | species
independent_varname | rgb
dependent_vartype   | text
buffer_size         | 10
</pre>

-# Shift integer dependent variable.  Let's say our input data has class levels
starting from 1, but we want them to start from 0 after preprocesssing.
Create a new image data set with class values as 1, 2 or 3:
<pre class="example">
DROP TABLE IF EXISTS image_data_2;
CREATE TABLE image_data_2 AS (
SELECT ARRAY[
        (random() * 256)::integer, -- R values
        (random() * 256)::integer,
        (random() * 256)::integer,
        (random() * 256)::integer,
        (random() * 256)::integer, -- G values
        (random() * 256)::integer,
        (random() * 256)::integer,
        (random() * 256)::integer,
        (random() * 256)::integer, -- B values
        (random() * 256)::integer,
        (random() * 256)::integer,
        (random() * 256)::integer
    ] as rgb, ('{1,2,3}'::integer[])[ceil(random()*3)] as species
FROM generate_series(1, 52)
);
SELECT * FROM image_data_2 LIMIT 10;
</pre>
<pre class="result">
                      rgb                       | species
------------------------------------------------+---------
 {103,220,183,64,237,22,86,152,10,170,81,68}    |       3
 {144,143,30,189,98,99,200,212,163,185,227,161} |       3
 {252,208,241,132,65,89,96,247,153,77,13,239}   |       3
 {23,153,55,92,146,199,235,176,131,77,19,75}    |       1
 {182,5,4,86,250,0,38,235,132,103,67,228}       |       2
 {220,50,107,203,23,131,100,78,222,246,21,201}  |       2
 {152,22,185,227,55,110,232,59,197,226,59,235}  |       3
 {192,82,16,164,176,236,214,27,183,237,158,27}  |       1
 {124,17,80,69,183,233,91,111,204,146,221,180}  |       3
 {162,150,8,141,98,200,222,114,108,142,95,66}   |       2
...
</pre>
Now run the preprocessor with a dependent variable offset of -1:
<pre class="example">
DROP TABLE IF EXISTS image_data_packed_2, image_data_packed_2_summary;
SELECT madlib.minibatch_preprocessor_dl('image_data_2',       -- Source table
                                        'image_data_packed_2', -- Output table
                                        'species',            -- Dependent variable
                                        'rgb',                -- Independent variable
                                        NULL,                 -- Buffer size
                                        255,                  -- Normalizing constant
                                        -1                    -- Dependent variable offset
                                        );
SELECT * FROM image_data_packed_2 ORDER BY buffer_id;
</pre>
<pre class="result">
-[ RECORD 1 ]-------+-------------------------------------
independent_var | {{0.564706,0.560784,0.117647,0.741176,0.384314,0.388235,0.784314,0.831373,0.639216,0.72549,0.890196,0.631373},...}}
dependent_var   | {2,0,1,0,1,1,1,0,1,0,2,0,1,0,1,0,2,0,2,0,2,1,0,1,0,0}
buffer_id       | 0
-[ RECORD 2 ]-------+-------------------------------------
independent_var | {{0.403922,0.862745,0.717647,0.25098,0.929412,0.0862745,0.337255,0.596078,0.0392157,0.666667,0.317647,0.266667},...}}
dependent_var   | {2,2,1,2,2,1,1,2,0,0,0,1,1,1,0,2,2,1,2,1,1,0,2,1,2,2}
buffer_id       | 1
</pre>

@anchor related
@par Related Topics

minibatch_preprocessing_dl.sql_in

minibatch_preprocessing.sql_in

*/

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.minibatch_preprocessor_dl(
    source_table                VARCHAR,
    output_table                VARCHAR,
    dependent_varname           VARCHAR,
    independent_varname         VARCHAR,
    buffer_size                 INTEGER,
    normalizing_const           DOUBLE PRECISION,
    one_hot_encode_int_dep_var  BOOLEAN
) RETURNS VOID AS $$
    PythonFunctionBodyOnly(utilities, minibatch_preprocessing)
    from utilities.control import MinWarning
    with AOControl(False):
        with MinWarning('error'):
            minibatch_preprocessor_obj = minibatch_preprocessing.MiniBatchPreProcessorDL(**globals())
            minibatch_preprocessor_obj.minibatch_preprocessor_dl()
$$ LANGUAGE plpythonu VOLATILE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.minibatch_preprocessor_dl(
    source_table            VARCHAR,
    output_table            VARCHAR,
    dependent_varname       VARCHAR,
    independent_varname     VARCHAR,
    buffer_size             INTEGER,
    normalizing_const       DOUBLE PRECISION
) RETURNS VOID AS $$
  SELECT MADLIB_SCHEMA.minibatch_preprocessor_dl($1, $2, $3, $4, $5, $6, FALSE);
$$ LANGUAGE sql VOLATILE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.minibatch_preprocessor_dl(
    source_table            VARCHAR,
    output_table            VARCHAR,
    dependent_varname       VARCHAR,
    independent_varname     VARCHAR,
    buffer_size             INTEGER
) RETURNS VOID AS $$
  SELECT MADLIB_SCHEMA.minibatch_preprocessor_dl($1, $2, $3, $4, $5, 1.0, FALSE);
$$ LANGUAGE sql VOLATILE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.minibatch_preprocessor_dl(
    source_table            VARCHAR,
    output_table            VARCHAR,
    dependent_varname       VARCHAR,
    independent_varname     VARCHAR
) RETURNS VOID AS $$
  SELECT MADLIB_SCHEMA.minibatch_preprocessor_dl($1, $2, $3, $4, NULL, 1.0, FALSE);
$$ LANGUAGE sql VOLATILE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.minibatch_preprocessor_dl(
    message VARCHAR
) RETURNS VARCHAR AS $$
    PythonFunctionBodyOnly(utilities, minibatch_preprocessing)
    return minibatch_preprocessing.MiniBatchDocumentation.minibatch_preprocessor_dl_help(schema_madlib, message)
$$ LANGUAGE plpythonu VOLATILE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.minibatch_preprocessor_dl()
RETURNS VARCHAR AS $$
    PythonFunctionBodyOnly(utilities, minibatch_preprocessing)
    return minibatch_preprocessing.MiniBatchDocumentation.minibatch_preprocessor_dl_help(schema_madlib, '')
$$ LANGUAGE plpythonu VOLATILE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.agg_array_concat_transition(anyarray, anyarray)
  RETURNS anyarray
   AS 'select $1 || $2'
   LANGUAGE SQL
   IMMUTABLE;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.agg_array_concat_merge(anyarray, anyarray)
  RETURNS anyarray
   AS 'select $1 || $2'
   LANGUAGE SQL
   IMMUTABLE
   RETURNS NULL ON NULL INPUT;

DROP AGGREGATE IF EXISTS MADLIB_SCHEMA.agg_array_concat(anyarray);
CREATE AGGREGATE MADLIB_SCHEMA.agg_array_concat(anyarray) (
   SFUNC = MADLIB_SCHEMA.agg_array_concat_transition,
   STYPE = anyarray,
   PREFUNC = MADLIB_SCHEMA.agg_array_concat_merge
   );
