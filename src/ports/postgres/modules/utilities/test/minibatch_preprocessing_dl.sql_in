/* ----------------------------------------------------------------------- *//**
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 *//* ----------------------------------------------------------------------- */

DROP TABLE IF EXISTS minibatch_preprocessor_dl_input;
CREATE TABLE minibatch_preprocessor_dl_input(id serial, x double precision[], label TEXT);
INSERT INTO minibatch_preprocessor_dl_input(x, label) VALUES
(ARRAY[1,2,3,4,5,6], 'a'),
(ARRAY[11,2,3,4,5,6], 'a'),
(ARRAY[11,22,33,4,5,6], 'a'),
(ARRAY[11,22,33,44,5,6], 'a'),
(ARRAY[11,22,33,44,65,6], 'a'),
(ARRAY[11,22,33,44,65,56], 'a'),
(ARRAY[11,22,33,44,65,56], 'a'),
(ARRAY[11,22,33,44,65,56], 'a'),
(ARRAY[11,22,33,44,65,56], 'a'),
(ARRAY[11,22,33,44,65,56], 'a'),
(ARRAY[11,22,33,44,65,56], 'a'),
(ARRAY[11,22,33,44,65,56], 'a'),
(ARRAY[11,22,33,144,65,56], 'a'),
(ARRAY[11,22,233,44,65,56], 'a'),
(ARRAY[11,22,33,44,65,56], 'b'),
(ARRAY[11,22,33,44,65,56], 'b'),
(ARRAY[11,22,33,44,65,56], 'b');

DROP TABLE IF EXISTS minibatch_preprocessor_dl_batch, minibatch_preprocessor_dl_batch_summary;
SELECT minibatch_preprocessor_dl(
  'minibatch_preprocessor_dl_input',
  'minibatch_preprocessor_dl_batch',
  'id',
  'x',
  5);

SELECT assert(count(*)=4, 'Incorrect number of buffers in minibatch_preprocessor_dl_batch.')
FROM minibatch_preprocessor_dl_batch;

SELECT assert(array_upper(independent_var, 2)=6, 'Incorrect buffer size.')
FROM minibatch_preprocessor_dl_batch WHERE buffer_id=0;

SELECT assert(array_upper(independent_var, 1)=5, 'Incorrect buffer size.')
FROM minibatch_preprocessor_dl_batch WHERE buffer_id=1;

SELECT assert(array_upper(independent_var, 1)=4, 'Incorrect buffer size.')
FROM minibatch_preprocessor_dl_batch WHERE buffer_id=3;

DROP TABLE IF EXISTS minibatch_preprocessor_dl_batch, minibatch_preprocessor_dl_batch_summary;
SELECT minibatch_preprocessor_dl(
  'minibatch_preprocessor_dl_input',
  'minibatch_preprocessor_dl_batch',
  'label',
  'x');

DROP TABLE IF EXISTS minibatch_preprocessor_dl_input;
CREATE TABLE minibatch_preprocessor_dl_input(id serial, x double precision[], y INTEGER, y1 BOOLEAN, y2 TEXT, y3 DOUBLE PRECISION, y4 DOUBLE PRECISION[]);
INSERT INTO minibatch_preprocessor_dl_input(x, y, y1, y2, y3, y4) VALUES
(ARRAY[1,2,3,4,5,6], 4, TRUE, 'a', 4.0, ARRAY[1.0, 0.0]),
(ARRAY[11,2,3,4,5,6], 3, TRUE, 'c', 4.2, ARRAY[0.0, 1.0]),
(ARRAY[11,22,33,4,5,6], 8, TRUE, 'a', 4.0, ARRAY[0.0, 1.0]),
(ARRAY[11,22,33,44,5,6], 2, FALSE, 'a', 4.2, ARRAY[0.0, 1.0]),
(ARRAY[11,22,33,44,65,6], 5, TRUE, 'b', 4.0, ARRAY[0.0, 1.0]),
(ARRAY[11,22,33,44,65,56], 6, TRUE, 'a', 5.0, ARRAY[1.0, 0.0]),
(ARRAY[11,22,33,44,65,56], 2, TRUE, 'a', 4.0, ARRAY[1.0, 0.0]),
(ARRAY[11,22,33,44,65,56], 10, TRUE, 'a', 4.0, ARRAY[1.0, 0.0]),
(ARRAY[11,22,33,44,65,56], 3, TRUE, 'b', 4.0, ARRAY[1.0, 0.0]),
(ARRAY[11,22,33,44,65,56], 7, FALSE, 'a', 5.0, ARRAY[1.0, 0.0]),
(ARRAY[11,22,33,44,65,56], 6, TRUE, 'a', 4.0, ARRAY[0.0, 1.0]),
(ARRAY[11,22,33,44,65,56], -6, TRUE, 'a', 4.0, ARRAY[1.0, 0.0]),
(ARRAY[11,22,33,144,65,56], 9, TRUE, 'c', 4.0, ARRAY[0.0, 1.0]),
(ARRAY[11,22,233,44,65,56], 0, TRUE, 'a', 5.0, ARRAY[1.0, 0.0]),
(ARRAY[11,22,33,44,65,56], 12, TRUE, 'a', 4.0, ARRAY[1.0, 0.0]),
(ARRAY[11,22,33,44,65,56], -3, FALSE, 'a', 4.2, ARRAY[1.0, 0.0]),
(ARRAY[11,22,33,44,65,56], -1, TRUE, 'b', 4.0, ARRAY[0.0, 1.0]);

DROP TABLE IF EXISTS minibatch_preprocessor_dl_batch, minibatch_preprocessor_dl_batch_summary;
SELECT minibatch_preprocessor_dl(
  'minibatch_preprocessor_dl_input',
  'minibatch_preprocessor_dl_batch',
  'y',
  'x',
  4,
  5);

-- Test that indepdendent vars get divided by 5, by verifying min value goes from 1 to 0.2, and max value from 233 to 46.6
SELECT assert(relative_error(MIN(x),0.2) < 0.00001, 'Independent var not normalized properly!') FROM (SELECT UNNEST(independent_var) as x FROM minibatch_preprocessor_dl_batch) a;
SELECT assert(relative_error(MAX(x),46.6) < 0.00001, 'Independent var not normalized properly!') FROM (SELECT UNNEST(independent_var) as x FROM minibatch_preprocessor_dl_batch) a;

DROP TABLE IF EXISTS minibatch_preprocessor_dl_batch, minibatch_preprocessor_dl_batch_summary;
SELECT minibatch_preprocessor_dl(
  'minibatch_preprocessor_dl_input',
  'minibatch_preprocessor_dl_batch',
  'y',
  'x',
  4,
  5,
  6);

-- Test that dependent vars gets shifted by +6, by verifying minimum value goes from -6 to 0
SELECT assert(abs(MIN(y))<0.00001, 'Dependent var not shifted properly!') FROM (SELECT UNNEST(y1) as y FROM minibatch_preprocessor_dl_batch) a;

DROP TABLE IF EXISTS minibatch_preprocessor_dl_batch, minibatch_preprocessor_dl_batch_summary;
SELECT minibatch_preprocessor_dl(
  'minibatch_preprocessor_dl_input',
  'minibatch_preprocessor_dl_batch',
  'y',
  'x',
  4,
  5,
  -6);

-- Test that dependent vars gets shifted by -6, by verifying minimum value goes from -6 to -12
SELECT assert(relative_error(MIN(y), -12)<0.00001, 'Dependent var not shifted properly!') FROM (SELECT UNNEST(y1) as y FROM minibatch_preprocessor_dl_batch) a;


-- Test one-hot encoding for dependent_var
-- test boolean type
DROP TABLE IF EXISTS minibatch_preprocessor_dl_batch, minibatch_preprocessor_dl_batch_summary;
SELECT minibatch_preprocessor_dl(
  'minibatch_preprocessor_dl_input',
  'minibatch_preprocessor_dl_batch',
  'y1',
  'x',
  4,
  5,
  NULL,
  TRUE);

-- test text type
DROP TABLE IF EXISTS minibatch_preprocessor_dl_batch, minibatch_preprocessor_dl_batch_summary;
SELECT minibatch_preprocessor_dl(
  'minibatch_preprocessor_dl_input',
  'minibatch_preprocessor_dl_batch',
  'y2',
  'x',
  4,
  5,
  NULL,
  TRUE);

-- test double precision type
DROP TABLE IF EXISTS minibatch_preprocessor_dl_batch, minibatch_preprocessor_dl_batch_summary;
SELECT minibatch_preprocessor_dl(
  'minibatch_preprocessor_dl_input',
  'minibatch_preprocessor_dl_batch',
  'y3',
  'x',
  4,
  5,
  NULL,
  TRUE);

-- test double precision array type
DROP TABLE IF EXISTS minibatch_preprocessor_dl_batch, minibatch_preprocessor_dl_batch_summary;
SELECT minibatch_preprocessor_dl(
  'minibatch_preprocessor_dl_input',
  'minibatch_preprocessor_dl_batch',
  'y4',
  'x',
  4,
  5,
  NULL,
  TRUE);
