# coding=utf-8
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import sys
import numpy as np
from os import path
# Add convex module to the pythonpath.
sys.path.append(path.dirname(path.dirname(path.dirname(path.dirname(path.abspath(__file__))))))
sys.path.append(path.dirname(path.dirname(path.dirname(path.abspath(__file__)))))

from keras import utils as keras_utils

import unittest
from mock import *
import plpy_mock as plpy

m4_changequote(`<!', `!>')

class MadlibKerasHelperTestCase(unittest.TestCase):
    def setUp(self):
        self.plpy_mock = Mock(spec='error')
        patches = {
            'plpy': plpy
        }

        self.plpy_mock_execute = MagicMock()
        plpy.execute = self.plpy_mock_execute

        self.module_patcher = patch.dict('sys.modules', patches)
        self.module_patcher.start()
        import madlib_keras_helper
        self.subject = madlib_keras_helper

        self.model = Sequential()
        self.model.add(Conv2D(2, kernel_size=(1, 1), activation='relu',
                         input_shape=(1,1,1,), padding='same'))
        self.model.add(Flatten())

        self.compile_params = "'optimizer'=SGD(lr=0.01, decay=1e-6, nesterov=True), 'loss'='categorical_crossentropy', 'metrics'=['accuracy']"
        self.fit_params = "'batch_size'=1, 'epochs'=1"
        self.model_weights = [3,4,5,6]
        self.loss = 1.3
        self.accuracy = 0.34
        self.all_seg_ids = [0,1,2]
        self.total_buffers_per_seg = [3,3,3]

    def tearDown(self):
        self.module_patcher.stop()

    def test_deserialize_weights_merge_null_state_returns_none(self):
        self.assertEqual(None, self.subject.KerasWeightsSerializer.deserialize_weights_merge(None))

    def test_deserialize_weights_merge_returns_not_none(self):
        dummy_model_state = np.array([0,1,2,3,4,5,6], dtype=np.float32)
        res = self.subject.KerasWeightsSerializer.deserialize_weights_merge(dummy_model_state.tostring())
        self.assertEqual(0, res[0])
        self.assertEqual(1, res[1])
        self.assertEqual(2, res[2])
        self.assertEqual([3,4,5,6], res[3].tolist())

    def test_deserialize_weights_null_input_returns_none(self):
        dummy_model_state = np.array([0,1,2,3,4,5,6], dtype=np.float32)
        self.assertEqual(None, self.subject.KerasWeightsSerializer.deserialize_weights(dummy_model_state.tostring(), None))
        self.assertEqual(None, self.subject.KerasWeightsSerializer.deserialize_weights(None, [1,2,3]))
        self.assertEqual(None, self.subject.KerasWeightsSerializer.deserialize_weights(None, None))

    def test_deserialize_weights_valid_input_returns_not_none(self):
        dummy_model_state = np.array([0,1,2,3,4,5], dtype=np.float32)
        dummy_model_shape = [(2, 1, 1, 1), (1,)]
        res = self.subject.KerasWeightsSerializer.deserialize_weights(dummy_model_state.tostring(), dummy_model_shape)
        self.assertEqual(0, res[0])
        self.assertEqual(1, res[1])
        self.assertEqual(2, res[2])
        self.assertEqual([[[[3.0]]], [[[4.0]]]], res[3][0].tolist())
        self.assertEqual([5], res[3][1].tolist())

    def test_deserialize_weights_invalid_input_fails(self):
        # pass an invalid state with missing model weights
        invalid_model_state = np.array([0,1,2], dtype=np.float32)
        dummy_model_shape = [(2, 1, 1, 1), (1,)]

        # we except keras failure(ValueError) because we cannot reshape model weights of size 0 into shape (2,2,3,1)
        with self.assertRaises(ValueError):
            self.subject.KerasWeightsSerializer.deserialize_weights(invalid_model_state.tostring(), dummy_model_shape)

        invalid_model_state = np.array([0,1,2,3,4], dtype=np.float32)
        dummy_model_shape = [(2, 2, 3, 1), (1,)]
        # we except keras failure(ValueError) because we cannot reshape model weights of size 2 into shape (2,2,3,1)
        with self.assertRaises(ValueError):
            self.subject.KerasWeightsSerializer.deserialize_weights(invalid_model_state.tostring(), dummy_model_shape)

    def test_deserialize_iteration_state_none_input_returns_none(self):
        self.assertEqual(None, self.subject.KerasWeightsSerializer.deserialize_iteration_state(None))

    def test_deserialize_iteration_state_returns_valid_output(self):
        dummy_iteration_state = np.array([0,1,2,3,4,5], dtype=np.float32)
        res = self.subject.KerasWeightsSerializer.deserialize_iteration_state(
            dummy_iteration_state.tostring())
        self.assertEqual(0, res[0])
        self.assertEqual(1, res[1])
        self.assertEqual(res[2],
                         np.array([0,0,0,3,4,5], dtype=np.float32).tostring())

    def test_serialize_weights_none_weights_returns_none(self):
        res = self.subject.KerasWeightsSerializer.serialize_weights(0,1,2,None)
        self.assertEqual(None , res)

    def test_serialize_weights_valid_output(self):
        res = self.subject.KerasWeightsSerializer.serialize_weights(0,1,2,[np.array([1,3]),
                                                    np.array([4,5])])
        self.assertEqual(np.array([0,1,2,1,3,4,5], dtype=np.float32).tostring(),
                         res)

    def test_serialize_weights_merge_none_weights_returns_none(self):
        res = self.subject.KerasWeightsSerializer.serialize_weights_merge(0,1,2,None)
        self.assertEqual(None , res)

    def test_serialize_weights_merge_valid_output(self):
        res = self.subject.KerasWeightsSerializer.serialize_weights_merge(0,1,2,np.array([1,3,4,5]))
        self.assertEqual(np.array([0,1,2,1,3,4,5], dtype=np.float32).tostring(),
                         res)

    def test_get_data_as_np_array_one_image_per_row(self):
        self.plpy_mock_execute.return_value = [{'x': [[1,2]], 'y': 0},
                                               {'x': [[5,6]], 'y': 1}]
        x_res, y_res = self.subject.get_data_as_np_array('foo','y','x', [1,1,2],
                                                         3)
        self.assertEqual(np.array([[[[1, 2]]], [[[5, 6]]]]).tolist(),
                         x_res.tolist())
        self.assertEqual(np.array([[1, 0, 0], [0, 1, 0]]).tolist(),
                         y_res.tolist())

    def test_get_data_as_np_array_multiple_images_per_row(self):
        self.plpy_mock_execute.return_value = [{'x': [[1,2], [3,4]], 'y': [0,2]},
                                               {'x': [[5,6], [7,8]], 'y': [1,0]}]
        x_res, y_res = self.subject.get_data_as_np_array('foo','y','x', [1,1,2],
                                                         3)
        self.assertEqual(np.array([[[[1,2]]], [[[3,4]]],
                                   [[[5,6]]], [[[7,8]]]]).tolist(),
                         x_res.tolist())
        self.assertEqual(np.array([[1,0,0], [0,0,1] ,
                                   [0,1,0], [1,0,0]]).tolist(),
                         y_res.tolist())

    def test_get_data_as_np_array_float_input_shape(self):
        self.plpy_mock_execute.return_value = [{'x': [[1,2]], 'y': 0},
                                               {'x': [[5,6]], 'y': 1}]
        x_res, y_res = self.subject.get_data_as_np_array('foo','y','x',
                                                         [1.5,1.9,2.3], 3)
        self.assertEqual(np.array([[[[1, 2]]], [[[5, 6]]]]).tolist(),
                         x_res.tolist())
        self.assertEqual(np.array([[1, 0, 0], [0, 1, 0]]).tolist(),
                         y_res.tolist())

    def test_get_data_as_np_array_invalid_input_shape(self):
        self.plpy_mock_execute.return_value = [{'x': [[1,2]], 'y': 0},
                                               {'x': [[5,6]], 'y': 1}]
        # we except keras failure(ValueError) because we cannot reshape
        # the input which is of size 2 to input shape of 1,1,3
        with self.assertRaises(ValueError):
            self.subject.get_data_as_np_array('foo','y','x', [1,1,3], 3)
