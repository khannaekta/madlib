# coding=utf-8
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import numpy as np
import os
import plpy

from keras import backend as K
from keras import utils as keras_utils
from keras.optimizers import *

from madlib_keras_helper import KerasWeightsSerializer
from utilities.utilities import extract_keyvalue_params

#######################################################################
########### Keras specific functions #####
#######################################################################
def get_device_name_for_keras(use_gpu, seg, gpus_per_host):
    if use_gpu:
        device_name = '/gpu:0'
        os.environ["CUDA_VISIBLE_DEVICES"] = str(seg % gpus_per_host)
    else: # cpu only
        device_name = '/cpu:0'
        os.environ["CUDA_VISIBLE_DEVICES"] = '-1'

    return device_name

def set_keras_session(use_gpu):
    config = K.tf.ConfigProto()
    if use_gpu:
        config.gpu_options.allow_growth = False
        config.gpu_options.per_process_gpu_memory_fraction = 0.9
    session = K.tf.Session(config=config)
    K.set_session(session)

def clear_keras_session():
    sess = K.get_session()
    K.clear_session()
    sess.close()

def compile_and_set_weights(segment_model, compile_params, device_name,
                            previous_state, model_shapes):
    with K.tf.device(device_name):
        compile_params = convert_string_of_args_to_dict(compile_params)
        segment_model.compile(**compile_params)
        _, _, _, model_weights = KerasWeightsSerializer.deserialize_weights(
            previous_state, model_shapes)
        segment_model.set_weights(model_weights)


"""
Used to convert compile_params and fit_params to actual argument dictionaries
"""
def convert_string_of_args_to_dict(str_of_args):
    """Uses parenthases matching algorithm to intelligently convert
    a string with valid python code into an argument dictionary"""

    plpy.info(str_of_args)
    param_defaults = {
        'optimizer_name': 'sgd',
        'optimizer_params': ''
    }
    param_types = {
        'optimizer_name': str,
        'optimizer_params': str
    }

    valid_optimizers = ['sgd', 'rmsprop', 'adagrad', 'adadelta', 'adam',
                        'adamax', 'nadam']
    optimizer_name, optimizer_params = extract_keyvalue_params(
        str_of_args, param_types, param_defaults, ignore_invalid=False)

    _assert(optimizer_name.lower() in valid_optimizers,
        "DL error: Optimizer name not recognized: " + optimizer_name)

    eval_cmd = optimizer_name + '(' + optimizer_params + ')'
    plpy.info(eval_cmd)
    return eval(eval_cmd)
